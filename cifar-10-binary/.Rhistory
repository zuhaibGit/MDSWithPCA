g <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
b <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
index <- num.images * (f-1) + i
images.rgb[[index]] = data.frame(r, g, b)
images.lab[[index]] = l+1
}
close(to.read)
remove(l,r,g,b,f,i,index, to.read)
}
#Converts the data frame for each image to a vector of zie 3072
flattened_images <- lapply(images.rgb, function(x) {return(c(as.matrix(x)))})
# function to run sanity check on photos & labels import
drawImage <- function(img) {
# Testing the parsing: Convert each color layer into a matrix,
# combine into an rgb object, and display as a plot
#img <- images.rgb[[index]]
img.r.mat <- matrix(img$r, ncol=32, byrow = TRUE)
img.g.mat <- matrix(img$g, ncol=32, byrow = TRUE)
img.b.mat <- matrix(img$b, ncol=32, byrow = TRUE)
img.col.mat <- rgb(img.r.mat, img.g.mat, img.b.mat, maxColorValue = 255)
dim(img.col.mat) <- dim(img.r.mat)
# Plot and output label
grid.raster(img.col.mat, interpolate=FALSE)
# clean up
remove(img, img.r.mat, img.g.mat, img.b.mat, img.col.mat)
}
#Finds the average value for each pixel and returns the resulting
#matrix
find_average_image <- function(lst_of_images) {
return(Reduce('+', lst_of_images)/length(lst_of_images))
}
#Computes the mean image for each category
mean_images <- list(
mean_images_1 <- find_average_image(images.rgb[which(images.lab == 1)]),
mean_images_2 <- find_average_image(images.rgb[which(images.lab == 2)]),
mean_images_3 <- find_average_image(images.rgb[which(images.lab == 3)]),
mean_images_4 <- find_average_image(images.rgb[which(images.lab == 4)]),
mean_images_5 <- find_average_image(images.rgb[which(images.lab == 5)]),
mean_images_6 <- find_average_image(images.rgb[which(images.lab == 6)]),
mean_images_7 <- find_average_image(images.rgb[which(images.lab == 7)]),
mean_images_8 <- find_average_image(images.rgb[which(images.lab == 8)]),
mean_images_9 <- find_average_image(images.rgb[which(images.lab == 9)]),
mean_images_10 <- find_average_image(images.rgb[which(images.lab == 10)]))
#Flattens the each data frame into a vector of length 3072
flattened_mean_images <- lapply(mean_images, function(x) {return(c(as.matrix(x)))})
imates.lab
images.lab
labels
images_1_airplane <- images.rgb[which(images.lab == 1)]
images_1_airplane <- images.rgb[which(images.lab == 1)]
images_2_automobiles <- images.rgb[which(images.lab == 2)]
images_3_birds <- images.rgb[which(images.lab == 3)]
images_4_cats <- images.rgb[which(images.lab == 4)]
images_5_deer <- images.rgb[which(images.lab == 5)]
images_6_dogs <- images.rgb[which(images.lab == 6)]
images_7_frogs <- images.rgb[which(images.lab == 7)]
images_8_horses <- images.rgb[which(images.lab == 8)]
images_9_ships <- images.rgb[which(images.lab == 9)]
images_10_trucks <- images.rgb[which(images.lab == 10)]
flattened_images[[21]]
do.call(rbind, list(c(1,2,3),c(4,5,6)))
images_1 <- flattened_images[which(images.lab == 1)]
images_2 <- flattened_images[which(images.lab == 2)]
images_3 <- flattened_images[which(images.lab == 3)]
images_4 <- flattened_images[which(images.lab == 4)]
images_5 <- flattened_images[which(images.lab == 5)]
images_6 <- flattened_images[which(images.lab == 6)]
images_7 <- flattened_images[which(images.lab == 7)]
images_8 <- flattened_images[which(images.lab == 8)]
images_9 <- flattened_images[which(images.lab == 9)]
images_10 <- flattened_images[which(images.lab == 10)]
df_1 <- do.call(rbind, images_1)
df_2 <- do.call(rbind, images_2)
df_3 <- do.call(rbind, images_3)
df_4 <- do.call(rbind, images_4)
df_5 <- do.call(rbind, images_5)
df_6 <- do.call(rbind, images_6)
df_7 <- do.call(rbind, images_7)
df_8 <- do.call(rbind, images_8)
df_9 <- do.call(rbind, images_9)
df_10 <- do.call(rbind, images_10)
dim(df_1)
dim(df_2)
pc_1 <- prcomp(df_1)
pc_1$rotation
pc_1$rotation$PC1
pc_1$rotation[1]
length(pc_1$rotation)
pc_1$rotation[,1]
dim(pc_1$rotation)
pc_1$sdev
plot(pc_1$sdev)
pc_1$sdev[1]
pc_1$sdev[20]
pc_1$rotation[,1]
dim(pc_1$rotation[,1])
dim(t(pc_1$rotation[,1]))
images_1_reconstructed <- lapply(images_1, function(x) {
flattened_mean_images[[1]] +
function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[1]])) * pc_1$rotation[,i])
}
return(summation)
}
})
images_1_reconstructed <- lapply(images_1, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[1]])) * pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[1]])
})
warnings()
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[1]])) %*% pc_1$rotation[,i])
images_1_reconstructed <- lapply(images_1, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[1]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[1]])
})
head(images_1[[1]])
head(images_1_reconstructed[[1]])
length(images_1_reconstructed[[1]])
length(image_1[[1]])
length(images_1[[1]])
head(images_1[[1]])
head(images_1_reconstructed[[1]])
head(images_1_reconstructed[[1]])
unique(images_1_reconstructed[[1]])
images_1_reconstructed[[1]][23]
images_1_reconstructed[[1]][1]
images_1[[1]][1]
images_1[[1]][2]
images_1_reconstructed[[1]][2]
images_1[[1]][3]
images_1_reconstructed[[1]][3]
drawImage(images_1[[1]])
# function to run sanity check on photos & labels import
drawImage <- function(img) {
# Testing the parsing: Convert each color layer into a matrix,
# combine into an rgb object, and display as a plot
#img <- images.rgb[[index]]
img.r.mat <- matrix(img[,1], ncol=32, byrow = TRUE)
img.g.mat <- matrix(img[,2], ncol=32, byrow = TRUE)
img.b.mat <- matrix(img[,3], ncol=32, byrow = TRUE)
img.col.mat <- rgb(img.r.mat, img.g.mat, img.b.mat, maxColorValue = 255)
dim(img.col.mat) <- dim(img.r.mat)
# Plot and output label
grid.raster(img.col.mat, interpolate=FALSE)
# clean up
remove(img, img.r.mat, img.g.mat, img.b.mat, img.col.mat)
}
drawImage(images.rgb[[1]])
drawImage(images.rgb[[1]])
images.lab[[1]]
labels[images.lab[[1]]]
labels[[images.lab[[1]]]]
labels[7]
labels
c(as.matric(c(1,2,3,4,5,6)))
c(as.matrix(c(1,2,3,4,5,6)))
as.matrix(c(1,2,3,4,5,6))
as.matrix(c(1,2,3,4,5,6),2,3)
matrix(c(1,2,3,4,5,6),2,3)
c(matrix(c(1,2,3,4,5,6),2,3))
matrix(c(matrix(c(1,2,3,4,5,6),2,3)),2,3)
drawImage(matrix(images_1[[1]],1024,3)
dev.off()
dev.off()
drawImage(matrix(images_1[[1]],1024,3))
drawImage(matrix(images_1_reconstructed[[1]],1024,3))
drawImage(matrix(images_1_reconstructed[[2]],1024,3))
drawImage(matrix(images_1[[2]],1024,3))
drawImage(matrix(images_1_reconstructed[[2]],1024,3))
drawImage(matrix(images_1[[3]],1024,3))
drawImage(matrix(images_1_reconstructed[[3]],1024,3))
drawImage(matrix(images_1_reconstructed[[4]],1024,3))
drawImage(matrix(images_1_reconstructed[[6]],1024,3))
drawImage(matrix(images_1[[6]],1024,3))
drawImage(matrix(images_1_reconstructed[[6]],1024,3))
drawImage(matrix(images_1[[6]],1024,3))
dev.off()
images_2_reconstructed <- lapply(images_2, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[2]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[2]])
})
images_3_reconstructed <- lapply(images_3, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[3]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[3]])
})
images_4_reconstructed <- lapply(images_4, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[4]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[4]])
})
images_5_reconstructed <- lapply(images_5, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[5]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[5]])
})
images_6_reconstructed <- lapply(images_6, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[6]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[6]])
})
images_7_reconstructed <- lapply(images_7, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[7]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[7]])
})
images_8_reconstructed <- lapply(images_8, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[8]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[8]])
})
images_9_reconstructed <- lapply(images_9, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[9]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[9]])
})
images_10_reconstructed <- lapply(images_10, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[10]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[10]])
})
drawImage(matrix(images_5_reconstructed[[600]],1024,3))
drawImage(matrix(images_5[[600]],1024,3))
drawImage(matrix(images_5_reconstructed[[600]],1024,3))
drawImage(matrix(images_5_reconstructed[[60]],1024,3))
drawImage(matrix(images_5[[60]],1024,3))
drawImage(matrix(images_5_reconstructed[[60]],1024,3))
drawImage(matrix(images_5[[60]],1024,3))
drawImage(matrix(images_5_reconstructed[[60]],1024,3))
drawImage(matrix(images_5[[60]],1024,3))
drawImage(matrix(images_9_reconstructed[[123]],1024,3))
drawImage(matrix(images_9[[123]],1024,3))
drawImage(matrix(images_9_reconstructed[[123]],1024,3))
drawImage(matrix(images_9[[123]],1024,3))
drawImage(matrix(images_9[[1230]],1024,3))
drawImage(matrix(images_9_reconstructed[[1230]],1024,3))
pc_2 <- prcomp(df_2)
pc_3 <- prcomp(df_3)
pc_4 <- prcomp(df_4)
pc_5 <- prcomp(df_5)
pc_6 <- prcomp(df_6)
pc_7 <- prcomp(df_7)
pc_8 <- prcomp(df_8)
pc_9 <- prcomp(df_9)
pc_10 <- prcomp(df_10)
pc_4 <- prcomp(df_4)
dim(df_4)
pc_4 <- prcomp(df_4)
gc()
pc_1 <- prcomp(df_1)
gc()
gc()
rm(list=ls())
gc()
asdf
adf
asd
f
asdf
adf
pc_1 <- prcomp(df_1)
library(grid)
setwd("C:/Users/Zuhaib Ahmed/Desktop/Machine Learning/Assignment 4/cifar-10-binary")
# Read binary file and convert to integer vectors
# [Necessary because reading directly as integer()
# reads first bit as signed otherwise]
#
# File format is 10000 records following the pattern:
# [label x 1][red x 1024][green x 1024][blue x 1024]
# NOT broken into rows, so need to be careful with "size" and "n"
#
# (See http://www.cs.toronto.edu/~kriz/cifar.html)
labels <- read.table("cifar-10-batches-bin/batches.meta.txt")
images.rgb <- list()
images.lab <- list()
num.images = 10000 # Set to 10000 to retrieve all images per file to memory
# Cycle through all 5 binary files
for (f in 1:6) {
to.read <- file(paste("cifar-10-batches-bin/data_batch_", f, ".bin", sep=""), "rb")
for(i in 1:num.images) {
l <- readBin(to.read, integer(), size=1, n=1, endian="big")
r <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
g <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
b <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
index <- num.images * (f-1) + i
images.rgb[[index]] = data.frame(r, g, b)
images.lab[[index]] = l+1
}
close(to.read)
remove(l,r,g,b,f,i,index, to.read)
}
#Converts the data frame for each image to a vector of zie 3072
flattened_images <- lapply(images.rgb, function(x) {return(c(as.matrix(x)))})
# function to run sanity check on photos & labels import
drawImage <- function(img) {
# Testing the parsing: Convert each color layer into a matrix,
# combine into an rgb object, and display as a plot
#img <- images.rgb[[index]]
img.r.mat <- matrix(img[,1], ncol=32, byrow = TRUE)
img.g.mat <- matrix(img[,2], ncol=32, byrow = TRUE)
img.b.mat <- matrix(img[,3], ncol=32, byrow = TRUE)
img.col.mat <- rgb(img.r.mat, img.g.mat, img.b.mat, maxColorValue = 255)
dim(img.col.mat) <- dim(img.r.mat)
# Plot and output label
grid.raster(img.col.mat, interpolate=FALSE)
# clean up
remove(img, img.r.mat, img.g.mat, img.b.mat, img.col.mat)
}
#Finds the average value for each pixel and returns the resulting
#matrix
find_average_image <- function(lst_of_images) {
return(Reduce('+', lst_of_images)/length(lst_of_images))
}
#Computes the mean image for each category
mean_images <- list(
mean_images_1 <- find_average_image(images.rgb[which(images.lab == 1)]),
mean_images_2 <- find_average_image(images.rgb[which(images.lab == 2)]),
mean_images_3 <- find_average_image(images.rgb[which(images.lab == 3)]),
mean_images_4 <- find_average_image(images.rgb[which(images.lab == 4)]),
mean_images_5 <- find_average_image(images.rgb[which(images.lab == 5)]),
mean_images_6 <- find_average_image(images.rgb[which(images.lab == 6)]),
mean_images_7 <- find_average_image(images.rgb[which(images.lab == 7)]),
mean_images_8 <- find_average_image(images.rgb[which(images.lab == 8)]),
mean_images_9 <- find_average_image(images.rgb[which(images.lab == 9)]),
mean_images_10 <- find_average_image(images.rgb[which(images.lab == 10)]))
#Flattens the each data frame into a vector of length 3072
flattened_mean_images <- lapply(mean_images, function(x) {return(c(as.matrix(x)))})
images_1 <- flattened_images[which(images.lab == 1)]
images_2 <- flattened_images[which(images.lab == 2)]
images_3 <- flattened_images[which(images.lab == 3)]
images_4 <- flattened_images[which(images.lab == 4)]
images_5 <- flattened_images[which(images.lab == 5)]
images_6 <- flattened_images[which(images.lab == 6)]
images_7 <- flattened_images[which(images.lab == 7)]
images_8 <- flattened_images[which(images.lab == 8)]
images_9 <- flattened_images[which(images.lab == 9)]
images_10 <- flattened_images[which(images.lab == 10)]
df_1 <- do.call(rbind, images_1)
df_2 <- do.call(rbind, images_2)
df_3 <- do.call(rbind, images_3)
df_4 <- do.call(rbind, images_4)
df_5 <- do.call(rbind, images_5)
df_6 <- do.call(rbind, images_6)
df_7 <- do.call(rbind, images_7)
df_8 <- do.call(rbind, images_8)
df_9 <- do.call(rbind, images_9)
df_10 <- do.call(rbind, images_10)
pc_1 <- prcomp(df_1)
pc_2 <- prcomp(df_2)
pc_3 <- prcomp(df_3)
pc_4 <- prcomp(df_4)
pc_5 <- prcomp(df_5)
pc_6 <- prcomp(df_6)
pc_7 <- prcomp(df_7)
pc_8 <- prcomp(df_8)
pc_9 <- prcomp(df_9)
pc_10 <- prcomp(df_10)
images_2_reconstructed <- lapply(images_2, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_2$rotation[,i]) %*% (x - flattened_mean_images[[2]])) %*% pc_2$rotation[,i])
}
return(summation + flattened_mean_images[[2]])
})
images_3_reconstructed <- lapply(images_3, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_3$rotation[,i]) %*% (x - flattened_mean_images[[3]])) %*% pc_3$rotation[,i])
}
return(summation + flattened_mean_images[[3]])
})
images_4_reconstructed <- lapply(images_4, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_4$rotation[,i]) %*% (x - flattened_mean_images[[4]])) %*% pc_4$rotation[,i])
}
return(summation + flattened_mean_images[[4]])
})
images_5_reconstructed <- lapply(images_5, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_5$rotation[,i]) %*% (x - flattened_mean_images[[5]])) %*% pc_5$rotation[,i])
}
return(summation + flattened_mean_images[[5]])
})
images_6_reconstructed <- lapply(images_6, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_6$rotation[,i]) %*% (x - flattened_mean_images[[6]])) %*% pc_6$rotation[,i])
}
return(summation + flattened_mean_images[[6]])
})
images_7_reconstructed <- lapply(images_7, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_7$rotation[,i]) %*% (x - flattened_mean_images[[7]])) %*% pc_7$rotation[,i])
}
return(summation + flattened_mean_images[[7]])
})
images_8_reconstructed <- lapply(images_8, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_8$rotation[,i]) %*% (x - flattened_mean_images[[8]])) %*% pc_8$rotation[,i])
}
return(summation + flattened_mean_images[[8]])
})
images_9_reconstructed <- lapply(images_9, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_9$rotation[,i]) %*% (x - flattened_mean_images[[9]])) %*% pc_9$rotation[,i])
}
return(summation + flattened_mean_images[[9]])
})
pc_10 <- prcomp(df_10)
drawImage(matrix(images_8_reconstructed[[32]],1024,3))
drawImage(matrix(images_8_reconstructed[[321]],1024,3))
list(c(1,2),3,4) - list(c(1,1),2,2)
length(images_1)
length(images_1_reconstructed)
length(images_2)
length(images_2_reconstructed)
c(1,2,3) - c(1,1,1)
(c(1,2,3) - c(1,1,1))^2
sum((c(1,2,3) - c(1,1,1))^2)
c(1,2,3) %*% c(1,1,1)
msd_og_recon_2 <- lapply(c(1:length(images_2)), function(x) {
return(sum((images_2[[x]] - images_2_reconstructed[[x]])^2))
})
length(msd_og_recon_2)
mean(msd_og_recon_2)
head(msd_og_recon_2)
mean(unlist(msd_og_recon_2))
msd_og_recon_3 <- lapply(c(1:length(images_3)), function(x) {
return(sum((images_3[[x]] - images_3_reconstructed[[x]])^2))
})
msd_og_recon_4 <- lapply(c(1:length(images_4)), function(x) {
return(sum((images_4[[x]] - images_4_reconstructed[[x]])^2))
})
msd_og_recon_5 <- lapply(c(1:length(images_5)), function(x) {
return(sum((images_5[[x]] - images_5_reconstructed[[x]])^2))
})
msd_og_recon_6 <- lapply(c(1:length(images_6)), function(x) {
return(sum((images_6[[x]] - images_6_reconstructed[[x]])^2))
})
msd_og_recon_7 <- lapply(c(1:length(images_7)), function(x) {
return(sum((images_7[[x]] - images_7_reconstructed[[x]])^2))
})
msd_og_recon_8 <- lapply(c(1:length(images_8)), function(x) {
return(sum((images_8[[x]] - images_8_reconstructed[[x]])^2))
})
msd_og_recon_9 <- lapply(c(1:length(images_9)), function(x) {
return(sum((images_9[[x]] - images_9_reconstructed[[x]])^2))
})
mean(unlist(msd_og_recon_2))
mean(unlist(msd_og_recon_3))
mean(unlist(msd_og_recon_4))
mean(unlist(msd_og_recon_5))
mean(unlist(msd_og_recon_6))
mean(unlist(msd_og_recon_7))
mean(unlist(msd_og_recon_8))
mean(unlist(msd_og_recon_9))
msd_og_recon_10 <- lapply(c(1:length(images_10)), function(x) {
return(sum((images_10[[x]] - images_10_reconstructed[[x]])^2))
})
images_10_reconstructed <- lapply(images_10, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_10$rotation[,i]) %*% (x - flattened_mean_images[[10]])) %*% pc_10$rotation[,i])
}
return(summation + flattened_mean_images[[10]])
})
pc_10 <- prcomp(df_10)
images_1_reconstructed <- lapply(images_1, function(x) {
summation <- 0
for (i in 1:20) {
summation <- summation + ((t(pc_1$rotation[,i]) %*% (x - flattened_mean_images[[1]])) %*% pc_1$rotation[,i])
}
return(summation + flattened_mean_images[[1]])
})
#Finds average mean squared difference between original images and reconstructed images
msd_og_recon_1 <- lapply(c(1:length(images_1)), function(x) {
return(sum((images_1[[x]] - images_1_reconstructed[[x]])^2))
})
mean(unlist(msd_og_recon_1))
rm(list=ls())
